c
searchc
params
c
params
c
format
c
request
format.html
format
c
cc
request.xhr?
c
n
continue
@posts=current_User.posts.where("title LIKE ? OR body  LIKE ?", "%#{params[:search]}%","%#{params[:search]}%").count
@posts=current_User.posts.where("title LIKE ? OR body  LIKE ?", "%#{params[:search]}%","%#{params[:search]}%")
params[:search].present?@posts=current_User.posts.where("title LIKE ? OR body  LIKE ?", "%#{params[:search]}%","%#{params[:search]}%")
continue
current_User.posts.count
current_User.posts
params[:search].present?
continue
c
n
c
n
c
cx
n
c
n
c
cc
c
n
c
nc
n
c
a.save!
a
a.user_id = 1
a.save!
a = Contact.new(contact_params)
a = Contacts.new(contact_params)
 @contact=current_User.contacts(contact_params)
params
c
contact_params
@contact
c
n
c
n
c
n
c
n
  @comments=current_User.comments.where("text LIKE ?","%#{params[:search]}%")
c
<%= form_tag(url:posts_path, method: :get, class: "search-form") do |form|%>
n
c
@posts=current_User.posts.where("title LIKE ? OR body LIKE ?", "%#{params[:search]}%","%#{params[:search]}%")
n
@posts
n
c
n
c
continue
n
@posts=current_User.posts.where("title LIKE ? OR body LIKE ?", "%#{params[:search]}%","%#{params[:search]}%")
next
params
n
c
n
whereami
c
@posts
@posts = Post.where(user_id: current_User.id)
c
@posts
c
C
Post.where("blinded")
c
current_User.posts
current_User
current_user
c
Post.where(user_id: current_User.id).count
Post.where(user_id: current_User.id)
current_User
c
Post.first
current_User
c
current_user
c
Post.create(body: post_data["body"], title: post_data["title"], user_id: 1)
User.first
User.count
Post.create(body: post_data["body"], title: post_data["title"])
post_data
 c
@posts
posts_data.count
posts_data
post_data["title"]
n
HTTParty.get('https://jsonplaceholder.typicode.com/posts')
